package com.neusoft.oddc.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.neusoft.oddc.db.dbentity.VehicleProfileEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEHICLE_PROFILE_ENTITY".
*/
public class VehicleProfileEntityDao extends AbstractDao<VehicleProfileEntity, Long> {

    public static final String TABLENAME = "VEHICLE_PROFILE_ENTITY";

    /**
     * Properties of entity VehicleProfileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key_user = new Property(1, String.class, "key_user", false, "KEY_USER");
        public final static Property Year = new Property(2, String.class, "year", false, "YEAR");
        public final static Property Brand = new Property(3, String.class, "brand", false, "BRAND");
        public final static Property Model = new Property(4, String.class, "model", false, "MODEL");
        public final static Property Color = new Property(5, String.class, "color", false, "COLOR");
        public final static Property Mileage = new Property(6, String.class, "mileage", false, "MILEAGE");
        public final static Property Vin = new Property(7, String.class, "vin", false, "VIN");
    }


    public VehicleProfileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public VehicleProfileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEHICLE_PROFILE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY_USER\" TEXT," + // 1: key_user
                "\"YEAR\" TEXT," + // 2: year
                "\"BRAND\" TEXT," + // 3: brand
                "\"MODEL\" TEXT," + // 4: model
                "\"COLOR\" TEXT," + // 5: color
                "\"MILEAGE\" TEXT," + // 6: mileage
                "\"VIN\" TEXT);"); // 7: vin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEHICLE_PROFILE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VehicleProfileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key_user = entity.getKey_user();
        if (key_user != null) {
            stmt.bindString(2, key_user);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(3, year);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(4, brand);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(5, model);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(7, mileage);
        }
 
        String vin = entity.getVin();
        if (vin != null) {
            stmt.bindString(8, vin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VehicleProfileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key_user = entity.getKey_user();
        if (key_user != null) {
            stmt.bindString(2, key_user);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(3, year);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(4, brand);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(5, model);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(7, mileage);
        }
 
        String vin = entity.getVin();
        if (vin != null) {
            stmt.bindString(8, vin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VehicleProfileEntity readEntity(Cursor cursor, int offset) {
        VehicleProfileEntity entity = new VehicleProfileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key_user
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // year
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // brand
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // model
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // color
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mileage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // vin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VehicleProfileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey_user(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYear(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMileage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VehicleProfileEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VehicleProfileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VehicleProfileEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
